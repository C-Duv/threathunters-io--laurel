on:
  push:
    tags:
      - "v*"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  prep:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Get Version
        id: get_version
        run: |
          version_git=$(echo "$GITHUB_REF" | sed -e 's/refs\/tags\///')
          version_cargo="v$(cargo read-manifest | jq -r '.version')"
          if [ "$version_git" != "$version_cargo" ]; then
              echo "git != cargo: $version_git != $version_cargo" >&2
              exit 1
          fi
          echo "git_version=$version_git" >> $GITHUB_OUTPUT
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true
          prerelease: false
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      git_version: ${{ steps.get_version.outputs.git_version }}

  build-musl:
    needs: prep
    runs-on: ubuntu-latest
    container: alpine:3.18
    steps:
      - name: Prepare
        run: |
          apk add git ca-certificates rust cargo clang-dev acl-static musl-dev linux-headers make pandoc
      - uses: actions/checkout@v2
      - name: Build
        run: |
          RUSTFLAGS='-C target-feature=+crt-static -L /lib -l static=acl' \
              cargo build --target x86_64-alpine-linux-musl --release
          make -C man
      - name: Build tarball
        run: |
          ln -f target/x86_64-alpine-linux-musl/release/laurel target/x86_64-alpine-linux-musl/release/laurel2audit .
          tar -czf laurel.tar.gz laurel laurel2audit *.md man/
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prep.outputs.upload_url }}
          asset_path: laurel.tar.gz
          asset_name: laurel-${{ needs.prep.outputs.git_version }}-x86_64-musl.tar.gz
          asset_content_type: application/tar
      # Use tar to keep permissions
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3.1.2
        with:
          name: laurel
          path: laurel.tar.gz

  build-glibc:
    needs: prep
    runs-on: ubuntu-latest
    container: rockylinux:8
    steps:
      - name: Prepare
        run: |
          dnf -q -y install 'dnf-command(config-manager)'
          dnf config-manager --enable powertools
          dnf -q -y update
          dnf -q -y install gcc file libacl-devel clang make pandoc
      - name: Install Rust toolchain (stable)
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
      - uses: actions/checkout@v2
      - name: Build
        run: |
          cargo build --release
          make -C man
      - name: Determine minimum GNU libc version
        run: |
          objdump -t target/release/laurel | sed -ne '/@GLIBC_/{s/^.*@GLIBC_//;p;}' | sort -uV
          min_glibc_version=$(objdump -t target/release/laurel \
              | sed -ne '/@GLIBC_/{s/^.*@GLIBC_//;p;}' \
              | sort -uV \
              | tail -n1)
          echo Minimum GNU libc version: $min_glibc_version
      - name: Build tarball
        run: |
          ln -f target/release/laurel target/release/laurel2audit .
          tar -czf laurel.tar.gz laurel laurel2audit *.md man/
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prep.outputs.upload_url }}
          asset_path: laurel.tar.gz
          asset_name: laurel-${{ needs.prep.outputs.git_version }}-x86_64-glibc.tar.gz
          asset_content_type: application/tar
